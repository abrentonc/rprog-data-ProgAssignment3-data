library(iris)
library(datasets)
data(iris)
iris<-iris
mean(iris$Sepal.Length)
factor(iris)
iris$species
table(iris)
View(iris)
iris[iris$species == virginica]
iris[iris$species == "virginica"]
g<-iris[iris$species == "virginica"]
View(g)
g<-iris[iris$species = "virginica"]
iris$species
g<-iris[iris$Species = "virginica"]
g<-iris[iris$Species == "virginica"]
View(iris)
levels(iris)
with(iris,levels(Species))
iris["virgnica"]
iris[Species == "virgnica"]
iris[iris$Species == "virgnica"]
iris$Species == "virgnica"
iris$Species == "virginica"
iris[iris$Species == "virginica"]
iris$Sepal.Length[iris$Species == "virginica"]
mean(iris$Sepal.Length[iris$Species == "virginica"])
mtcars<-data(mtcars)
library(datasets)
data(mtcars)
mtcars<-mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
source('~/.active-rstudio-document')
makeVector(3)
m
x<<-9
makeVector
makeVector()
g
g<-makeVector()
?ls
rnorm(3)
?rnorm
?quantile
?gl
source('~/.active-rstudio-document')
g<-makeVector(1:10)
y<-cacheMean(1:10)
y<-cachemean(1:10)
y<-cachemean(g)
?mean
y<-cachemean(g)
source('~/.active-rstudio-document')
g<-makeCacheMatrix(matrix(1:4,2))
g$get()
g$getinverse()
g$set(matrix(5:8,2))
g$get
g$get()
cacheSolve(g)
cacheSolve(g)
g$getinverse()
b = a$getinverse()
b = g$getinverse()
g$get()%*%b
library(swirl)
install.package(swirl)
install.packages("swirl")
library(swirl)
swirl()
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by  = .5)
seq(5, 10, length = 30)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along () my_seq)
seq_along (my_seq)
rep(0, times = 40)
rep(c(0,1,2) , times = 10)
rep(c(0,1,2) , each = 10)
num_vect <- numeric(.5,55,-10,6)
num_vect <- c(.5,55,-10,6)
tf <- num_vect <1
tf
nv<-num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
(my_char, collapse = " ")
my_char, collapse = " "
paste(my_char, collapse = " ")
my_name<-c(my_char, "Adam")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("~/rprog-data-ProgAssignment3-data")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head("outcome")
head(outcome)
ncol(outcome)
names(outcome)
outcome[,11 <- as.numeric(outcome[,11])]
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
?min
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
split(outcome, "State")
bystate<-split(outcome, "State")
test <- data.frame(obs = runif(30,5,7) ,fac=rep(c(0,1,2),each = 10))
split(test,fac)
split(test,"fac")
as.factor(test$fac)
levels(test)
tested<-split(test,"fac")
soutcome <- outcome[outcome$State == state]
state = "CO"
outcome$State
soutcome <- outcome[outcome$State == state]
statemask <- outcome$state == state
View(outcome)
statemask <- outcome$State == state
namespace <- outcome$Hospital.Name
namespace <- outcome$Hospital.Name[statemask]
prefix<-"Hospital.30.Day.Death..Mortality..Rates.from."
input<-"heart attack"
input[[1]]
View(outcome)
outcomes <- c("heart attack","heart failure","pneumonia")
outcome <- input
outcomes == outcome
outcomes <- C(11,17,23)[c("heart attack","heart failure","pneumonia")==outcome]
outcomes1<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"  )
outcomes <- outcomes1[outcomes==outcome]
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
statemask <- data$State == state
outcomes<-c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack","Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure","Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"  )
outcomespace1 <- c("heart attack","heart failure","pneumonia")
outcome <- outcomes[outcomespace1 == outcome]
outcomespace2 <- data$outcome[statemask]
outcomespace2 <- data[[outcome]][statemask]
outcomespace2 <- as.numeric(data[[outcome]][statemask])
lowr<-min(outcomespace(2) na.rm=TRUE)
lowr<-min(outcomespace2 na.rm=TRUE)
min(outcomespace2 na.rm=TRUE)
lowr<-min(outcomespace2, na.rm=TRUE)
sort(namespace[outcomespace==lowr])
sort(namespace[outcomespace2==lowr])
